directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE
type Border {
  id: ID!
  name: String
  style: String
  width: Int
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Color {
  id: ID!
  name: String
  hex: String
  rgb: String
  rgba: String
  hsla: String
  red: Int
  green: Int
  blue: Int
  alpha: Float
}

type Duration {
  id: ID!
  name: String
  value: String
}

type EaseCurve {
  id: ID!
  name: String
  value: String
}

type Filter {
  id: ID!
  name: String
  value: String
}

type Gradient {
  id: ID!
  name: String
  colors: [GradientColor]
}

type GradientColor {
  color: Color
  stop: Float
}

type Query {
  colors: [Color]
  color(id: ID!): Color
  gradients: [Gradient]
  gradient(id: ID!): Gradient
  shadows: [Shadow]
  shadow(id: ID!): Shadow
  borders: [Border]
  border(id: ID!): Border
  radii: [Radius]
  radius(id: ID!): Radius
  spaces: [Space]
  space(id: ID!): Space
  durations: [Duration]
  duration(id: ID!): Duration
  typefaces: [Typeface]
  typeface(id: ID!): Typeface
  textstyles: [TextStyle]
  textstyle(id: ID!): TextStyle
  transforms: [Transform]
  transform(id: ID!): Transform
  filters: [Filter]
  filter(id: ID!): Filter
}

type Radius {
  id: ID!
  name: String
  value: String
}

type Shadow {
  id: ID!
  name: String
  layers: [ShadowLayer]
}

type ShadowLayer {
  color: Color
  x: Int
  y: Int
  blur: Int
  spread: Int
}

type Space {
  id: ID!
  name: String
  value: String
}

type TextStyle {
  id: ID!
  name: String
  fontFamily: Typeface
  fontSize: String
  lineHeight: String
  letterSpacing: String
  wordSpacing: String
}

type Transform {
  id: ID!
  name: String
  value: String
  origin: String
}

type Transition {
  id: ID!
  name: String
  duration: Duration
  transform: Transform
  ease: EaseCurve
}

type Typeface {
  id: ID!
  name: String
  value: String
}

# The `Upload` scalar type
 represents a file upload.
scalar Upload

